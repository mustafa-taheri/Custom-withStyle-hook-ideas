import { useContext, useEffect } from 'react';
import { ThemeContext } from '@mui/system';
import { useTheme } from '@mui/material/styles';

const convertToCssSyntax = (property) => {
  return property.replace(/([A-Z])/g, '-$1').toLowerCase();
};

const processStyles = (styles, theme) => {
  const processedStyles = {};

  Object.keys(styles).forEach((className) => {
    const styleValue = styles[className];
    const processedStyle = {};

    Object.keys(styleValue).forEach((key) => {
      const value = styleValue[key];

      if (typeof value === 'object' && !Array.isArray(value)) {
        const mediaStyles = processStyles(value, theme);
        processedStyle[key] = mediaStyles;
      } else {
        processedStyle[convertToCssSyntax(key)] = value;
      }
    });

    processedStyles[className] = processedStyle;
  });

  return processedStyles;
};

const useConvertedStyles = (styles) => {
  const theme = useTheme() || useContext(ThemeContext);

  const processedStyles = typeof styles === 'function' ? styles(theme) : styles;
  const convertedStyles = processStyles(processedStyles, theme);
  const styleSheet = document.createElement('style');
  const classMapping = {};

  useEffect(() => {
    let cssString = '';

    const generateCSSString = (stylesObj, parentSelector = '') => {
      Object.keys(stylesObj).forEach((className) => {
        const selector = `${parentSelector} .${className}`;
        const styleValue = stylesObj[className];

        if (typeof styleValue === 'object') {
          generateCSSString(styleValue, selector);
        } else {
          const rule = `${selector} {${Object.entries(styleValue).map(([key, value]) => `${key}: ${value};`).join(' ')}}`;
          cssString += rule;
        }
      });
    };

    generateCSSString(convertedStyles);

    styleSheet.innerHTML = cssString;
    document.head.appendChild(styleSheet);

    return () => {
      document.head.removeChild(styleSheet);
    };
  }, []);

  const applyClassName = (className) => {
    if (classMapping[className]) {
      return classMapping[className];
    } else {
      const uniqueClassName = `custom-guideme-css-${Math.random().toString(36).substring(2, 7)}`;
      classMapping[className] = uniqueClassName;
      return uniqueClassName;
    }
  };

  return applyClassName;
};

export default useConvertedStyles;
